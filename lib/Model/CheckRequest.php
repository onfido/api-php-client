<?php
/**
 * CheckRequest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Onfido
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Onfido API
 *
 * The Onfido API is used to submit check requests.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Onfido\Model;

use \ArrayAccess;
use \Onfido\ObjectSerializer;

/**
 * CheckRequest Class Doc Comment
 *
 * @category Class
 * @package  Onfido
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CheckRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'check_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'applicant_id' => 'string',
        'report_names' => 'string[]',
        'privacy_notices_read_consent_given' => 'bool',
        'document_ids' => 'string[]',
        'applicant_provides_data' => 'bool',
        'asynchronous' => 'bool',
        'tags' => 'string[]',
        'suppress_form_emails' => 'bool',
        'redirect_uri' => 'string',
        'consider' => 'string[]',
        'webhook_ids' => 'string[]',
        'us_driving_licence' => 'array<string,object>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'applicant_id' => null,
        'report_names' => null,
        'privacy_notices_read_consent_given' => null,
        'document_ids' => null,
        'applicant_provides_data' => null,
        'asynchronous' => null,
        'tags' => null,
        'suppress_form_emails' => null,
        'redirect_uri' => null,
        'consider' => null,
        'webhook_ids' => null,
        'us_driving_licence' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'applicant_id' => 'applicant_id',
        'report_names' => 'report_names',
        'privacy_notices_read_consent_given' => 'privacy_notices_read_consent_given',
        'document_ids' => 'document_ids',
        'applicant_provides_data' => 'applicant_provides_data',
        'asynchronous' => 'asynchronous',
        'tags' => 'tags',
        'suppress_form_emails' => 'suppress_form_emails',
        'redirect_uri' => 'redirect_uri',
        'consider' => 'consider',
        'webhook_ids' => 'webhook_ids',
        'us_driving_licence' => 'us_driving_licence'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'applicant_id' => 'setApplicantId',
        'report_names' => 'setReportNames',
        'privacy_notices_read_consent_given' => 'setPrivacyNoticesReadConsentGiven',
        'document_ids' => 'setDocumentIds',
        'applicant_provides_data' => 'setApplicantProvidesData',
        'asynchronous' => 'setAsynchronous',
        'tags' => 'setTags',
        'suppress_form_emails' => 'setSuppressFormEmails',
        'redirect_uri' => 'setRedirectUri',
        'consider' => 'setConsider',
        'webhook_ids' => 'setWebhookIds',
        'us_driving_licence' => 'setUsDrivingLicence'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'applicant_id' => 'getApplicantId',
        'report_names' => 'getReportNames',
        'privacy_notices_read_consent_given' => 'getPrivacyNoticesReadConsentGiven',
        'document_ids' => 'getDocumentIds',
        'applicant_provides_data' => 'getApplicantProvidesData',
        'asynchronous' => 'getAsynchronous',
        'tags' => 'getTags',
        'suppress_form_emails' => 'getSuppressFormEmails',
        'redirect_uri' => 'getRedirectUri',
        'consider' => 'getConsider',
        'webhook_ids' => 'getWebhookIds',
        'us_driving_licence' => 'getUsDrivingLicence'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['applicant_id'] = $data['applicant_id'] ?? null;
        $this->container['report_names'] = $data['report_names'] ?? null;
        $this->container['privacy_notices_read_consent_given'] = $data['privacy_notices_read_consent_given'] ?? null;
        $this->container['document_ids'] = $data['document_ids'] ?? null;
        $this->container['applicant_provides_data'] = $data['applicant_provides_data'] ?? null;
        $this->container['asynchronous'] = $data['asynchronous'] ?? true;
        $this->container['tags'] = $data['tags'] ?? null;
        $this->container['suppress_form_emails'] = $data['suppress_form_emails'] ?? null;
        $this->container['redirect_uri'] = $data['redirect_uri'] ?? null;
        $this->container['consider'] = $data['consider'] ?? null;
        $this->container['webhook_ids'] = $data['webhook_ids'] ?? null;
        $this->container['us_driving_licence'] = $data['us_driving_licence'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets applicant_id
     *
     * @return string|null
     */
    public function getApplicantId()
    {
        return $this->container['applicant_id'];
    }

    /**
     * Sets applicant_id
     *
     * @param string|null $applicant_id The ID of the applicant to do the check on.
     *
     * @return self
     */
    public function setApplicantId($applicant_id)
    {
        $this->container['applicant_id'] = $applicant_id;

        return $this;
    }

    /**
     * Gets report_names
     *
     * @return string[]|null
     */
    public function getReportNames()
    {
        return $this->container['report_names'];
    }

    /**
     * Sets report_names
     *
     * @param string[]|null $report_names An array of report names (strings).
     *
     * @return self
     */
    public function setReportNames($report_names)
    {
        $this->container['report_names'] = $report_names;

        return $this;
    }

    /**
     * Gets privacy_notices_read_consent_given
     *
     * @return bool|null
     */
    public function getPrivacyNoticesReadConsentGiven()
    {
        return $this->container['privacy_notices_read_consent_given'];
    }

    /**
     * Sets privacy_notices_read_consent_given
     *
     * @param bool|null $privacy_notices_read_consent_given Boolean to indicate that the privacy notices and terms of service have been read and, where specific laws require, that consent has been given for Onfido.
     *
     * @return self
     */
    public function setPrivacyNoticesReadConsentGiven($privacy_notices_read_consent_given)
    {
        $this->container['privacy_notices_read_consent_given'] = $privacy_notices_read_consent_given;

        return $this;
    }

    /**
     * Gets document_ids
     *
     * @return string[]|null
     */
    public function getDocumentIds()
    {
        return $this->container['document_ids'];
    }

    /**
     * Sets document_ids
     *
     * @param string[]|null $document_ids Optional. An array of document ids, for use with Document reports only. If omitted, the Document report will use the most recently uploaded document by default.
     *
     * @return self
     */
    public function setDocumentIds($document_ids)
    {
        $this->container['document_ids'] = $document_ids;

        return $this;
    }

    /**
     * Gets applicant_provides_data
     *
     * @return bool|null
     */
    public function getApplicantProvidesData()
    {
        return $this->container['applicant_provides_data'];
    }

    /**
     * Sets applicant_provides_data
     *
     * @param bool|null $applicant_provides_data Send an applicant form to applicant to complete to proceed with check. Defaults to false.
     *
     * @return self
     */
    public function setApplicantProvidesData($applicant_provides_data)
    {
        $this->container['applicant_provides_data'] = $applicant_provides_data;

        return $this;
    }

    /**
     * Gets asynchronous
     *
     * @return bool|null
     */
    public function getAsynchronous()
    {
        return $this->container['asynchronous'];
    }

    /**
     * Sets asynchronous
     *
     * @param bool|null $asynchronous Defaults to `true`. If set to `false`, you will only receive a response when all reports in your check have completed.
     *
     * @return self
     */
    public function setAsynchronous($asynchronous)
    {
        $this->container['asynchronous'] = $asynchronous;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags Array of tags being assigned to this check.
     *
     * @return self
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets suppress_form_emails
     *
     * @return bool|null
     */
    public function getSuppressFormEmails()
    {
        return $this->container['suppress_form_emails'];
    }

    /**
     * Sets suppress_form_emails
     *
     * @param bool|null $suppress_form_emails For checks where `applicant_provides_data` is `true`, applicant form will not be automatically sent if `suppress_form_emails` is set to `true`. You can manually send the form at any time after the check has been created, using the link found in the form_uri attribute of the check object. Write-only. Defaults to false.
     *
     * @return self
     */
    public function setSuppressFormEmails($suppress_form_emails)
    {
        $this->container['suppress_form_emails'] = $suppress_form_emails;

        return $this;
    }

    /**
     * Gets redirect_uri
     *
     * @return string|null
     */
    public function getRedirectUri()
    {
        return $this->container['redirect_uri'];
    }

    /**
     * Sets redirect_uri
     *
     * @param string|null $redirect_uri For checks where `applicant_provides_data` is `true`, redirect to this URI when the applicant has submitted their data. Read-only.
     *
     * @return self
     */
    public function setRedirectUri($redirect_uri)
    {
        $this->container['redirect_uri'] = $redirect_uri;

        return $this;
    }

    /**
     * Gets consider
     *
     * @return string[]|null
     */
    public function getConsider()
    {
        return $this->container['consider'];
    }

    /**
     * Sets consider
     *
     * @param string[]|null $consider Array of names of particular reports to return consider as their results. This is a feature available in sandbox testing
     *
     * @return self
     */
    public function setConsider($consider)
    {
        $this->container['consider'] = $consider;

        return $this;
    }

    /**
     * Gets webhook_ids
     *
     * @return string[]|null
     */
    public function getWebhookIds()
    {
        return $this->container['webhook_ids'];
    }

    /**
     * Sets webhook_ids
     *
     * @param string[]|null $webhook_ids An array of webhook ids describing which webhooks to trigger for this check.
     *
     * @return self
     */
    public function setWebhookIds($webhook_ids)
    {
        $this->container['webhook_ids'] = $webhook_ids;

        return $this;
    }

    /**
     * Gets us_driving_licence
     *
     * @return array<string,object>|null
     */
    public function getUsDrivingLicence()
    {
        return $this->container['us_driving_licence'];
    }

    /**
     * Sets us_driving_licence
     *
     * @param array<string,object>|null $us_driving_licence An object that contains all accepted fields for the Driver's License Data Verification report.
     *
     * @return self
     */
    public function setUsDrivingLicence($us_driving_licence)
    {
        $this->container['us_driving_licence'] = $us_driving_licence;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


